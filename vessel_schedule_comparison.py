# -*- coding: utf-8 -*-
"""Vessel Schedule Comparison.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ix2kcEU0T8z8dAIYGb_EX6bbC3V3W6Lr
"""

import pandas as pd
import re
from docx import Document
from datetime import datetime
from docx import Document

import streamlit as st
import pandas as pd

st.title("Vessel Schedule Comparator")

word_file = st.file_uploader("Upload Word schedule (.docx)", type="docx")
excel_file = st.file_uploader("Upload Vessel CSV", type="csv")

# ---------- 1. LOAD WORD TABLE ----------
def load_word_schedule(path):
    doc = Document(path)
    records = []
    for table in doc.tables:
        for row in table.rows[1:]:  # skip header
            cells = [cell.text.strip() for cell in row.cells]
            if len(cells) >= 5:
                vessel, date, ship_line, agent, cargo, fpr, berth = cells[:7]
                units_info = parse_units(cargo)
                records.append({
                    'vessel': re.sub(r'[^a-z0-9\s]', '', vessel.strip().lower()),
                    'date': parse_date(date, 2025),
                    'units': units_info.get("units"),
                    'cargo_type': units_info.get("cargo_type"),
                    'location': units_info.get("location"),
                    'ship_line': ship_line.strip(),
                    'agent': agent.strip()
                })
    return pd.DataFrame(records)

# ---------- 2. LOAD EXCEL SCHEDULE ----------
def load_excel_schedule(path):
    df = pd.read_csv(path)
    df = df.rename(columns=str.lower)  # normalize headers

    # Standardize text columns
    df['vessel'] = df['ship name'].astype(str).str.strip().str.lower().str.replace(r'[^a-z0-9\s]', '', regex=True)
    df['date'] = pd.to_datetime(df['date'], errors='coerce').dt.date

    # Remove duplicates or reservations based on 'comments' column
    df['comments'] = df['comments'].astype(str).str.lower().str.strip()
    df = df[~df['comments'].str.startswith(('duplicate', 'reservation'))]

    df['ship name'] = df['ship name'].str.strip().str.lower()

    df = (
      df.groupby(['vessel', 'date'], as_index=False)
      .agg({
            'vessel discharge': 'sum',
            'cargo': 'first',
            'ship line': 'first',
            'agent': 'first'
      })
    )

    return df
# ---------- 3. PARSE UNITS FIELD ----------
def parse_units(text):
    """
    Parses strings like:
    - '52 Toyota - M'
    - '40 M/T'

    Returns:
    - units: int
    - cargo_type: str
    - location: str or None
    """
    text = text.strip()

    # Handle Petcoke format (M/T)
    mt_match = re.match(r"(\d+)\s+M/T", text, re.IGNORECASE)
    if mt_match:
        return {
            'units': int(mt_match.group(1)),
            'cargo_type': 'Petcoke',
            'location': None
        }

    # Handle standard car shipment format: "## Carline - Location"
    car_match = re.match(r"(\d+)\s+([A-Za-z0-9\s]+)\s*-\s*([A-Za-z\s]+)", text)
    if car_match:
        return {
            'units': int(car_match.group(1)),
            'cargo_type': car_match.group(2).strip(),
            'location': car_match.group(3).strip()
        }

    # If nothing matched
    return {'units': None, 'cargo_type': None, 'location': None}

# ---------- 4. PARSE DATE ----------

def parse_date(text, default_year=2025):
    try:
        # Assume format is DD/MM, e.g. '03/06' → 3rd June
        month, day = map(int, text.strip().split('/'))
        return datetime(year=default_year, month=month, day=day).date()
    except:
        return None

# ---------- 5. COMPARE FUNCTION ----------
def compare_schedules(df_word, df_excel):
    comparison = []

    for _, word_row in df_word.iterrows():
        excel_match = df_excel[
            (df_excel['vessel'] == word_row['vessel']) &
            (df_excel['date'] == word_row['date'])
        ]
        # All valid vessels on word document should contain date
        if not word_row['date']:
          continue
        if excel_match.empty:
            comparison.append(f"❌ No match in CSV for {word_row['vessel']} on {word_row['date']}")
        else:
            comparison.append(f"✅ Match for {word_row['vessel']} on {word_row['date']}")
            if excel_match['vessel discharge'].values[0] == 0:
              comparison.append(f"··········· ❌ No units found in CSV")

    return comparison

# ---------- 6. MAIN ----------
# def main():
#     word_path = 'WEEKLY SHIP SCHEDULE 6-2-2025.docx'
#     excel_path = 'Vessel_Schedule (6).csv'

#     df_word = load_word_schedule(word_path)
#     df_excel = load_excel_schedule(excel_path)
#     print(df_word, df_excel)

#     results = compare_schedules(df_word, df_excel)
#     for line in results:
#         print(line)

# if __name__ == "__main__":
#     main()

if word_file and excel_file:
    df_word = load_word_schedule(word_file)
    df_excel = load_excel_schedule(excel_file)
    results = compare_schedules(df_word, df_excel)

    for line in results:
        st.text(line)

